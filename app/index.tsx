import { IconSymbol } from '@/components/ui/IconSymbol';
import { supabase } from '@/lib/supabase';
import { LinearGradient } from 'expo-linear-gradient';
import { router } from 'expo-router';
import { useEffect, useRef, useState } from 'react';
import {
  Animated,
  Dimensions,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

const features = [
  {
    icon: 'brain.head.profile',
    title: 'AI-Powered Learning',
    description: 'Personalized lessons generated by advanced AI technology',
    color: '#6366F1',
  },
  {
    icon: 'person.3.sequence.fill',
    title: 'Multi-Role Support',
    description: 'Seamless experience for parents, teachers, and administrators',
    color: '#10B981',
  },
  {
    icon: 'chart.line.uptrend.xyaxis',
    title: 'Real-Time Analytics',
    description: 'Track progress with detailed insights and reports',
    color: '#F59E0B',
  },
  {
    icon: 'video.bubble.left.fill',
    title: 'Interactive Communication',
    description: 'Connect through video calls, messaging, and notifications',
    color: '#EF4444',
  },
];

export default function WelcomeScreen() {
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const [currentFeature, setCurrentFeature] = useState(0);
  const rotationRef = useRef<ReturnType<typeof setInterval> | null>(null);
  const sliderRef = useRef<ScrollView | null>(null);

  useEffect(() => {
    // If already authenticated, route based on role
    (async () => {
      try {
        const { data: sessionData } = await supabase.auth.getSession();
        const authId = sessionData.session?.user?.id;
        if (authId) {
          // Try to read role with a couple retries to avoid RLS/replication delays
          const getRole = async (id: string, attempts = 6, delayMs = 200): Promise<string | null> => {
            for (let i = 0; i < attempts; i++) {
              const { data: profile } = await supabase
                .from('users')
                .select('role')
                .eq('auth_user_id', id)
                .single();
              if (profile?.role) return profile.role as string;
              await new Promise((r) => setTimeout(r, delayMs));
            }
            return null;
          };

          const role = await getRole(authId);
          if (role === 'superadmin') {
            router.replace('/screens/super-admin-dashboard');
            return;
          }
          router.replace('/(tabs)/dashboard');
          return;
        }
      } catch { }
    })();

    // Initial animation
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();
    // Auto-rotate features and scroll slides
    rotationRef.current && clearInterval(rotationRef.current as any);
    rotationRef.current = setInterval(() => {
      setCurrentFeature((prev) => {
        const next = (prev + 1) % features.length;
        try {
          sliderRef.current?.scrollTo({ x: next * screenWidth, y: 0, animated: true });
        } catch { }
        return next;
      });
    }, 3500);

    return () => {
      rotationRef.current && clearInterval(rotationRef.current as any);
    };
  }, [fadeAnim, slideAnim]);

  const FeatureCard = ({ feature, index, isActive }: any) => (
    <Animated.View
      style={[
        styles.featureCard,
        {
          opacity: isActive ? 1 : 0.3,
          transform: [
            {
              scale: isActive ? 1 : 0.95,
            },
          ],
        },
      ]}
    >
      <LinearGradient
        colors={[feature.color + '20', feature.color + '05']}
        style={styles.featureGradient}
      >
        <View style={[styles.featureIcon, { backgroundColor: feature.color + '15' }]}>
          <IconSymbol name={feature.icon} size={28} color={feature.color} />
        </View>
        <Text style={styles.featureTitle}>{feature.title}</Text>
        <Text style={styles.featureDescription}>{feature.description}</Text>
      </LinearGradient>
    </Animated.View>
  );

  return (
    <>
      <StatusBar barStyle="light-content" />
      <LinearGradient
        colors={['#667eea', '#764ba2', '#f093fb']}
        style={styles.container}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <SafeAreaView style={styles.safeArea}>
          <ScrollView
            contentContainerStyle={styles.scrollContainer}
            showsVerticalScrollIndicator={false}
          >
            {/* Hero Section */}
            <Animated.View
              style={[
                styles.heroSection,
                {
                  opacity: fadeAnim,
                  transform: [{ translateY: slideAnim }],
                },
              ]}
            >
              <View style={styles.logoContainer}>
                <LinearGradient
                  colors={['#FFFFFF30', '#FFFFFF10']}
                  style={styles.logoBackground}
                >
                  <IconSymbol name="graduationcap.fill" size={60} color="#FFFFFF" />
                </LinearGradient>
              </View>

              <Text style={styles.appName}>EduDash Pro</Text>
              <Text style={styles.tagline}>Next-Generation Educational Platform</Text>
              <Text style={styles.subtitle}>
                Empowering education through AI, connecting teachers, parents, and students
              </Text>
            </Animated.View>

            {/* Features Section */}
            <View style={styles.featuresSection}>
              <Text style={styles.featuresTitle}>Powerful Features</Text>
              <ScrollView
                ref={sliderRef as any}
                horizontal
                showsHorizontalScrollIndicator={false}
                pagingEnabled
                style={styles.featuresScroll}
                contentContainerStyle={styles.featuresScrollContent}
                onScroll={(e) => {
                  const x = e.nativeEvent.contentOffset.x;
                  const index = Math.round(x / screenWidth);
                  if (index !== currentFeature) setCurrentFeature(Math.max(0, Math.min(features.length - 1, index)));
                }}
                decelerationRate="fast"
                snapToInterval={screenWidth}
                snapToAlignment="center"
                scrollEventThrottle={16}
              >
                {features.map((feature, index) => (
                  <View key={index} style={styles.featurePage}>
                    <FeatureCard
                      feature={feature}
                      index={index}
                      isActive={index === currentFeature}
                    />
                  </View>
                ))}
              </ScrollView>

              {/* Feature Indicators */}
              <View style={styles.indicators}>
                {features.map((_, index) => (
                  <View
                    key={index}
                    style={[
                      styles.indicator,
                      {
                        backgroundColor: index === currentFeature ? '#FFFFFF' : '#FFFFFF50',
                      },
                    ]}
                  />
                ))}
              </View>
            </View>

            {/* CTA Section */}
            <Animated.View
              style={[
                styles.ctaSection,
                {
                  opacity: fadeAnim,
                },
              ]}
            >
              <TouchableOpacity
                style={styles.primaryButton}
                onPress={() => {
                  // Get started â†’ sign in
                  router.push('/(auth)/sign-in');
                }}
                activeOpacity={0.9}
              >
                <LinearGradient
                  colors={['#FFFFFF', '#F8F9FA']}
                  style={styles.buttonGradient}
                >
                  <IconSymbol name="arrow.right.circle.fill" size={24} color="#667eea" />
                  <Text style={styles.primaryButtonText}>Get Started</Text>
                </LinearGradient>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={() => {
                  // Generic create account
                  router.push('/(auth)/sign-up');
                }}
                activeOpacity={0.8}
              >
                <IconSymbol name="person.fill" size={20} color="#FFFFFF" />
                <Text style={styles.secondaryButtonText}>Create Account</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={() => {
                  // Quick join for invited users (QR or code)
                  router.push('/(auth)/join-with-code');
                }}
                activeOpacity={0.8}
              >
                <IconSymbol name="qrcode" size={20} color="#FFFFFF" />
                <Text style={styles.secondaryButtonText}>Join with Code</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={() => {
                  // Register your school flow (3-step wizard)
                  router.push('/(auth)/school-onboarding');
                }}
                activeOpacity={0.8}
              >
                <IconSymbol name="graduationcap.fill" size={20} color="#FFFFFF" />
                <Text style={styles.secondaryButtonText}>Register Your School</Text>
              </TouchableOpacity>

              <TouchableOpacity
                onPress={() => router.push('/(auth)/sign-up?role=parent')}
                activeOpacity={0.8}
              >
                <Text style={styles.parentLink}>Join as a parent</Text>
              </TouchableOpacity>
            </Animated.View>
          </ScrollView>
        </SafeAreaView>
      </LinearGradient>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
  },
  safeArea: {
    flex: 1,
  },
  heroSection: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingVertical: 60,
    minHeight: screenHeight * 0.5,
  },
  logoContainer: {
    marginBottom: 32,
  },
  logoBackground: {
    width: 120,
    height: 120,
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FFFFFF30',
  },
  appName: {
    fontSize: 48,
    fontWeight: '800',
    color: '#FFFFFF',
    marginBottom: 12,
    textAlign: 'center',
    letterSpacing: -1,
    textShadowColor: 'rgba(0,0,0,0.3)',
    textShadowOffset: { width: 0, height: 2 },
    textShadowRadius: 8,
  },
  tagline: {
    fontSize: 20,
    fontWeight: '600',
    color: '#FFFFFF90',
    textAlign: 'center',
    marginBottom: 16,
    letterSpacing: 0.5,
  },
  subtitle: {
    fontSize: 16,
    color: '#FFFFFF80',
    textAlign: 'center',
    lineHeight: 24,
    maxWidth: 280,
  },
  featuresSection: {
    paddingHorizontal: 24,
    paddingVertical: 40,
    alignItems: 'center',
  },
  featuresTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 32,
    textShadowColor: 'rgba(0,0,0,0.2)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 4,
  },
  featuresScroll: {
    marginBottom: 24,
    alignSelf: 'stretch',
  },
  featuresScrollContent: {
    alignItems: 'center',
    justifyContent: 'center',
    width: '100%',
  },
  featurePage: {
    width: screenWidth,
    alignItems: 'center',
    justifyContent: 'center',
  },
  featureCard: {
    width: '90%',
    maxWidth: 360,
    alignSelf: 'center',
    borderRadius: 24,
    overflow: 'hidden',
  },
  featureGradient: {
    padding: 32,
    alignItems: 'center',
    minHeight: 200,
    justifyContent: 'center',
    borderRadius: 24,
    borderWidth: 1,
    borderColor: '#FFFFFF20',
  },
  featureIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
    borderWidth: 2,
    borderColor: '#FFFFFF30',
  },
  featureTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 12,
  },
  featureDescription: {
    fontSize: 14,
    color: '#FFFFFF90',
    textAlign: 'center',
    lineHeight: 20,
    maxWidth: 240,
  },
  indicators: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
  },
  indicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  ctaSection: {
    paddingHorizontal: 24,
    paddingVertical: 40,
    alignItems: 'center',
  },
  primaryButton: {
    marginBottom: 16,
    borderRadius: 16,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 12,
  },
  buttonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 20,
    paddingHorizontal: 40,
    gap: 12,
    minWidth: 200,
  },
  primaryButtonText: {
    fontSize: 18,
    fontWeight: '700',
    color: '#667eea',
    letterSpacing: 0.5,
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    backgroundColor: '#FFFFFF20',
    borderWidth: 2,
    borderColor: '#FFFFFF30',
    gap: 8,
    marginBottom: 24,
    minWidth: 160,
  },
  secondaryButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  parentLink: {
    fontSize: 14,
    color: '#FFFFFF',
    textDecorationLine: 'underline',
    opacity: 0.9,
  },
  credentialsHint: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    backgroundColor: '#FFFFFF10',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#FFFFFF20',
  },
  hintText: {
    fontSize: 12,
    color: '#FFFFFF80',
    fontWeight: '500',
  },
});
