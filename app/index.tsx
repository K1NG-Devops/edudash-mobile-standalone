import React, { useEffect, useRef, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  StatusBar,
  Animated,
  Dimensions,
  ScrollView,
  ImageBackground,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { router } from 'expo-router';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

const features = [
  {
    icon: 'brain.head.profile',
    title: 'AI-Powered Learning',
    description: 'Personalized lessons generated by advanced AI technology',
    color: '#6366F1',
  },
  {
    icon: 'person.3.sequence.fill',
    title: 'Multi-Role Support',
    description: 'Seamless experience for parents, teachers, and administrators',
    color: '#10B981',
  },
  {
    icon: 'chart.line.uptrend.xyaxis',
    title: 'Real-Time Analytics',
    description: 'Track progress with detailed insights and reports',
    color: '#F59E0B',
  },
  {
    icon: 'video.bubble.left.fill',
    title: 'Interactive Communication',
    description: 'Connect through video calls, messaging, and notifications',
    color: '#EF4444',
  },
];

export default function WelcomeScreen() {
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const [currentFeature, setCurrentFeature] = useState(0);

  useEffect(() => {
    // Initial animation
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();

    // Feature rotation
    const interval = setInterval(() => {
      setCurrentFeature((prev) => (prev + 1) % features.length);
    }, 3000);

    return () => clearInterval(interval);
  }, [fadeAnim, slideAnim]);

  const FeatureCard = ({ feature, index, isActive }: any) => (
    <Animated.View
      style={[
        styles.featureCard,
        {
          opacity: isActive ? 1 : 0.3,
          transform: [
            {
              scale: isActive ? 1 : 0.95,
            },
          ],
        },
      ]}
    >
      <LinearGradient
        colors={[feature.color + '20', feature.color + '05']}
        style={styles.featureGradient}
      >
        <View style={[styles.featureIcon, { backgroundColor: feature.color + '15' }]}>
          <IconSymbol name={feature.icon} size={28} color={feature.color} />
        </View>
        <Text style={styles.featureTitle}>{feature.title}</Text>
        <Text style={styles.featureDescription}>{feature.description}</Text>
      </LinearGradient>
    </Animated.View>
  );

  return (
    <>
      <StatusBar barStyle="light-content" backgroundColor="transparent" translucent />
      <LinearGradient
        colors={['#667eea', '#764ba2', '#f093fb']}
        style={styles.container}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <ScrollView
          contentContainerStyle={styles.scrollContainer}
          showsVerticalScrollIndicator={false}
        >
          {/* Hero Section */}
          <Animated.View
            style={[
              styles.heroSection,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }],
              },
            ]}
          >
            <View style={styles.logoContainer}>
              <LinearGradient
                colors={['#FFFFFF30', '#FFFFFF10']}
                style={styles.logoBackground}
              >
                <IconSymbol name="graduationcap.fill" size={60} color="#FFFFFF" />
              </LinearGradient>
            </View>
            
            <Text style={styles.appName}>EduDash Pro</Text>
            <Text style={styles.tagline}>Next-Generation Educational Platform</Text>
            <Text style={styles.subtitle}>
              Empowering education through AI, connecting teachers, parents, and students
            </Text>
          </Animated.View>

          {/* Features Section */}
          <View style={styles.featuresSection}>
            <Text style={styles.featuresTitle}>Powerful Features</Text>
            <ScrollView
              horizontal
              showsHorizontalScrollIndicator={false}
              pagingEnabled
              style={styles.featuresScroll}
            >
              {features.map((feature, index) => (
                <FeatureCard
                  key={index}
                  feature={feature}
                  index={index}
                  isActive={index === currentFeature}
                />
              ))}
            </ScrollView>
            
            {/* Feature Indicators */}
            <View style={styles.indicators}>
              {features.map((_, index) => (
                <View
                  key={index}
                  style={[
                    styles.indicator,
                    {
                      backgroundColor: index === currentFeature ? '#FFFFFF' : '#FFFFFF50',
                    },
                  ]}
                />
              ))}
            </View>
          </View>

          {/* CTA Section */}
          <Animated.View
            style={[
              styles.ctaSection,
              {
                opacity: fadeAnim,
              },
            ]}
          >
            <TouchableOpacity
              style={styles.primaryButton}
              onPress={() => {
                console.log('Navigate to sign-in');
                router.push('/(auth)/sign-in');
              }}
              activeOpacity={0.9}
            >
              <LinearGradient
                colors={['#FFFFFF', '#F8F9FA']}
                style={styles.buttonGradient}
              >
                <IconSymbol name="arrow.right.circle.fill" size={24} color="#667eea" />
                <Text style={styles.primaryButtonText}>Get Started</Text>
              </LinearGradient>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={styles.secondaryButton}
              onPress={() => {
                console.log('Navigate to demo dashboard');
                router.push('/(tabs)/dashboard');
              }}
              activeOpacity={0.8}
            >
              <IconSymbol name="eye.fill" size={20} color="#FFFFFF" />
              <Text style={styles.secondaryButtonText}>View Demo</Text>
            </TouchableOpacity>
            
            <View style={styles.credentialsHint}>
              <IconSymbol name="info.circle.fill" size={16} color="#FFFFFF80" />
              <Text style={styles.hintText}>Demo: admin@demo.com / password123</Text>
            </View>
          </Animated.View>
        </ScrollView>
      </LinearGradient>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    paddingTop: StatusBar.currentHeight || 44,
  },
  heroSection: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingVertical: 60,
    minHeight: screenHeight * 0.5,
  },
  logoContainer: {
    marginBottom: 32,
  },
  logoBackground: {
    width: 120,
    height: 120,
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FFFFFF30',
  },
  appName: {
    fontSize: 48,
    fontWeight: '800',
    color: '#FFFFFF',
    marginBottom: 12,
    textAlign: 'center',
    letterSpacing: -1,
    textShadowColor: 'rgba(0,0,0,0.3)',
    textShadowOffset: { width: 0, height: 2 },
    textShadowRadius: 8,
  },
  tagline: {
    fontSize: 20,
    fontWeight: '600',
    color: '#FFFFFF90',
    textAlign: 'center',
    marginBottom: 16,
    letterSpacing: 0.5,
  },
  subtitle: {
    fontSize: 16,
    color: '#FFFFFF80',
    textAlign: 'center',
    lineHeight: 24,
    maxWidth: 280,
  },
  featuresSection: {
    paddingHorizontal: 24,
    paddingVertical: 40,
  },
  featuresTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 32,
    textShadowColor: 'rgba(0,0,0,0.2)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 4,
  },
  featuresScroll: {
    marginBottom: 24,
  },
  featureCard: {
    width: screenWidth - 80,
    marginHorizontal: 16,
    borderRadius: 24,
    overflow: 'hidden',
  },
  featureGradient: {
    padding: 32,
    alignItems: 'center',
    minHeight: 200,
    justifyContent: 'center',
    borderRadius: 24,
    borderWidth: 1,
    borderColor: '#FFFFFF20',
  },
  featureIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
    borderWidth: 2,
    borderColor: '#FFFFFF30',
  },
  featureTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 12,
  },
  featureDescription: {
    fontSize: 14,
    color: '#FFFFFF90',
    textAlign: 'center',
    lineHeight: 20,
    maxWidth: 240,
  },
  indicators: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
  },
  indicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  ctaSection: {
    paddingHorizontal: 24,
    paddingVertical: 40,
    alignItems: 'center',
  },
  primaryButton: {
    marginBottom: 16,
    borderRadius: 16,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 12,
  },
  buttonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 20,
    paddingHorizontal: 40,
    gap: 12,
    minWidth: 200,
  },
  primaryButtonText: {
    fontSize: 18,
    fontWeight: '700',
    color: '#667eea',
    letterSpacing: 0.5,
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    backgroundColor: '#FFFFFF20',
    borderWidth: 2,
    borderColor: '#FFFFFF30',
    gap: 8,
    marginBottom: 24,
    minWidth: 160,
  },
  secondaryButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  credentialsHint: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    backgroundColor: '#FFFFFF10',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#FFFFFF20',
  },
  hintText: {
    fontSize: 12,
    color: '#FFFFFF80',
    fontWeight: '500',
  },
});
